--Loja Virtual
datatype produto = Smartphone | TV
produtos = {(Smartphone, 450, 3), (TV, 870, 2)}

--O primeiro parâmetro de todos os canais é a identificação do acesso: 1 ou 2.
channel autenticaUsuario:{1..2}.{0}.{0}
channel adicionaCarrinho:{1..2}.produtos
channel acessaProduto:{1..2}.produtos
channel loginFalhou:{1..2}.{0..2}
channel acessoCliente:{1..2}
channel pesquisaProduto:{1..2}
channel confereItens:{1..2}
channel finalizaCompra:{1..2}
channel continuarComprando:{1..2}
channel confirmaEndereco:{1.2}
channel escolherFormaPagamento:{1..2}
channel confirmaPagamento:{1..2}
channel calcularFrete:{1..2}
channel concluirCompra:{1..2}
channel loginOk:{1..2} 
channel cadastrarNovoUsuario:{1..2}
channel exibeInfoProduto:{1..2}.{450,870}
channel removerItem:produtos
channel carrinhoVazio:{1..2}

item = (TV, 870,2)
acessosSimultaneos = {1..2}

-- Entrelaçamento
LOJAVIRTUAL = ||| i:acessosSimultaneos @ ACESSOCLIENTE(i)

ACESSOCLIENTE(i) = acessoCliente.i -> NAVEGACAO(i, <>)

NAVEGACAO(i, c) = pesquisaProduto.i -> acessaProduto.i?item -> DETALHEPRODUTO(i, item, c)

-- Let .. Within
DETALHEPRODUTO(i, item, c) = let 
								preco = funPreco(item) 
							 within
							 	exibeInfoProduto.i.preco -> adicionaCarrinho.i!item -> CARRINHO(i, <item>^c)

-- Comprehension
funPreco(item) = head( seq({preco | (nome, preco, estoque) <- {item} }) )

CARRINHO(i, c) = 	if length(c) == 0 then
						carrinhoVazio.i -> NAVEGACAO(i,c)
					---limite de 2 itens por carrinho (para evitar recursão infinita)
					else if length(c) < 2 and length(c)>0 then 
		  	  			(continuarComprando.i -> NAVEGACAO(i, c)
		  	  				[]
		  	  			concluirCompra.i -> AUTENTICACAO(i, c, 0)
		  	  				[]
		  	  			-- Restrição de conjunto, só deve ser possível remover o que foi inserido.
		  	  			removerItem?iOut:set(c) -> CARRINHO(i, funRemoveItem(iOut, c, <>)))
		  	  		-- Carrinho atingiu limite de itens
		  	  		else 
		  	  			concluirCompra.i -> AUTENTICACAO(i, c, 0)
		  	  				[]
		  	  			-- Restrição de conjunto, só deve ser possível remover o que foi inserido.
		  	  			removerItem?iOut:set(c) -> CARRINHO(i, funRemoveItem(iOut, c, <>))

funRemoveItem(iOut, c, checked) = 	let 
										item = head(c)
						 			within 
						 				if (item == iOut) then
						 					tail(c) ^ checked
						 				else
					 						funRemoveItem(iOut, tail(c), checked ^ <item>)

AUTENTICACAO(i, c, n) = CADASTRONOVOUSUARIO(i,c,n)
					[]
		     	  autenticaUsuario.i?login.senha -> 
					((loginOk.i -> PAGAMENTO(i,c))
					  |~|
					(loginFalhou.i!n+1 -> 
							if(n+1 < 2) then 
								AUTENTICACAO(i, c, n+1) 
							else
								ACESSOCLIENTE(i)))

PAGAMENTO(i,c) = escolherFormaPagamento.i -> ACESSOCLIENTE(i)
CADASTRONOVOUSUARIO(i,c,n) = cadastrarNovoUsuario.i -> AUTENTICACAO(i,c,n)

assert LOJAVIRTUAL :[deadlock free[F]] -- PASSED


--TODO versão normal: 
--acrescentar valor.
--acrescentar paralelismo sincronizado com cliente ou operadora de cartão de crédito.
--
--TODO versão refinada: 
--retirar não determinismo do login
